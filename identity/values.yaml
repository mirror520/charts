# Default values for identity.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: mirror770109/identity
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  # nodePort: 30080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Create an IngressRoute for the identity
ingressRoute:
  # Enable traefik ingress route
  enabled: false
  # IngressRoute is the CRD implementation of a Traefik HTTP Router.
  annotations: {}
    # kubernetes.io/ingress.class: traefik
  # Specify the allowed entrypoints to use for the identity ingress route
  entryPoints: ["web", "websecure"] 
  # The router match rule used for the dashboard ingressRoute
  matchRule: Host(`identity.kube.internal`)
  # Additional ingressRoute middlewares (e.g. for authentication)
  middlewares: []
  # TLS options (e.g. secret containing certificate)
  tls: {}

envFrom:
  - secretRef:
      name: identity
      optional: true
  # - secretRef:
  #     name: consul
  #     optional: false

persistence:
  enabled: true
  name: data
#  existingClaim: ""
  accessMode: ReadWriteOnce
  size: 1Gi
  storageClass: "microk8s-hostpath"
  # volumeName: ""
  path: /data
  annotations: {}
  # subPath: "" # only mount a subpath of the Volume into the pod

configs:
  name: $HOSTNAME
  baseUrl: identity.kube.internal
  jwt:
    secret: $JWT_SECRET_KEY
    timeout: 1h
    refresh:
      enabled: true
      maximum: 1h30m
  transports:
    http:
      enabled: true
      internal:
        # scheme: http
        # host: identity.namespace.svc.cluster.local
        # port: 80
        health:
          enabled: true
          path: /health
      # external:
      #   scheme: https
      #   host: identity.linyc.idv.tw
      #   port: 443
    nats:
      enabled: true
      internal:
        scheme: nats
        host: nats.internal
        port: 4222
        health:
          enabled: true
          path: identity.$HOSTNAME.health
      # external:
      #   scheme: nats
      #   host: nats.external
      #   port: 4222
      reqPrefix: identity.$HOSTNAME
    loadBalancing:
      enabled: false
  persistence:
    driver: sqlite
    name: users
    host: /data
  eventBus:
    provider: nats
    users:
      stream:
        name: USERS
        config: |
          {
            "description": "identity:users",
            "subjects": [
              "users.>"
            ]
          }
      consumer:
        name: $HOSTNAME
        stream: USERS
        config: |
          {
            "ack_policy": "explicit"
          }
  providers:
    google:
      client: 
        id: $GOOGLE_CLIENT_ID
        secret: $GOOGLE_CLIENT_SECRET

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 3
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

nats:
  enabled: false

  nats:
    jetstream:
      enabled: true
